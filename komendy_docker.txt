Komendy platformy Docker:

Komenda 1 -> wersja dockera: docker version
Komenda 2 -> wersja docker-compose: docker-compose version
Komenda 3 -> uruchamianie kontenera z pakietu diamol: docker container run diamol/ch02-hello-diamol
Komenda 4 -> uruchomienie interakcyjnego kontenera: docker container run --interactive --tty diamol/base
Komenda 5 -> podgląd informacji o działających kontenerach: docker container ls
Komenda 6 -> wyświetlenie wszytkich wpisów w rejestrze zapisanym przez kontener: docker container logs 829ef94e7984
Komenda 7 -> wyświetlenie szczegółowych onformacji o kontenerze: docker container inspect 829ef94e7984
Komenda 8 -> uruchomienie aplikacji webowej w tle: docker container run --detach --publish 8088:80 diamol/ch02-hello-diamol-web
Komenda 9 -> usuwanie wszystkich kontenerów: docker container rm --force $(docker container ls --all --quiet)
Komenda 10 -> wykonanie kontenera na podstawie pobranego obrazu: docker image pull diamol/ch03-web-ping
Komenda 11 -> uruchomienie aplikacji webowej w  kontemerze docker: docker container run -d --name web-ping diamol/ch03-web-ping
Komenda 12 -> usunięcie kontenera: docker rm -f web-ping
Komenda 13 -> uruchomienie aplikacji webowej ze zmieną środowiskową TARGET (definiującą adres serwera): docker container run --env TARGET=google.com diamol/ch03-web-ping
Komenda 14 -> przekształcenie dockerfile w obraz Dockera: 
Komenda 15 -> wyświetlenie wszystkich pbrazów zaczynająch się na kiterę w:  docker ls 'w*'
Komenda 16 -> Ururchomienie kontenera na podstawie utworzonego obrazu, tak by aplikacja sprawdzała dostępność strony co 5sekund: docker container run -e TARGET=docker.com -e INTERVAL=5000 web-ping
Komenda 17 ->wyświetlenie hisotrii obrazu kontenera: docker image history web-ping
Komenda 18 ->wyświetlenie wszytskich obrazów: docker image ls
Komenda 19 ->wyświetlenie wagi obiektów docker: docker system df


Zadanie - Python-sigmoid

1. Wejście do katalogu projektu: cd sigmoid_
2. budowa kontenera:  docker build -t sigmoid-python .
3. uruchamianie obrazy kontenera w trybie interaktywnym: docker container run --interactive --tty sigmoid-python


________________________________________________________________________________________________

wejście do katalogu multi-stage:  C:\diamol\ch04\exercises\multi-stage
Komenda 20 -> utworzenie obrazu z wieloetapowego dockerfile: docker image build -t multi-stage .
Komenda 21 -> uruchomienie kontenera z obrazu: docker run multi-stage

Komenda 22 -> Obraz aplikacji JAVA:
  docker image build -t image-of-the-day
  docker network create nat
  docker image run --name iotd -d -p 800:80 --network nat image-of-the-day

Komenda 23 -> Uruchamianie prostej aplikacji Docker Compose
      opcjonlne utworzenie sieci: docker network create nat
      uruchomienie docker compose:  docker-compose up
      wpisanie adresu: localhost:8020

Komenda 24 -> Uruchomienie aplikacji image-of-the-day
  C:\diamol\ch07\exercises> cd image-of-the-day
  docker-compose up --detach

KUBERNETES

Komenda 24 -> narzędzie wiersza poleceń klastra Kubernetes:  kubectl get nodes
Komenda 25 -> uruchomienie kapsuły Kubernetes :  kubectl run hello-kiamol --image=kiamol/ch02-hello-kiamol --restart=Never
Komenda 26 -> oczekiwanie aż kapsuła będzie gotowa: kubectl wait --for=condition=Ready pod hello-kiamol
Komenda 27 -> wyświetlenie wszystkich kapsuł w klastrze: kubectl get pods
Komenda 28 -> wyświetlenie szczegółowych informacji o kapsule:  kubectl describe pod hello-kiamol
Komenda 29 -> określenie niestandardowycch kolumn w danych wyjściowych:  kubectl get pod hello-kiamol --output custom-columns=NAME:metadata.name,NODE_IP:status.hostIP,POD_IP:status.podI
Komenda 30 -> wyszukiwanie kontemeara danej kapsuły: docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol
Komenda 31 -> usunięcie kontenera:  docker container rm -f $(docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol)
Komenda 32 -> przywracanie kontenera do kapsuły: docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol
Komenda 33 -> uruchomienie aplikacji www:
     kubectl run hkiamol --image=kiamol/ch02-hello-kiamol --restart=Never
      kubectl get pod hkiamol
      kubectl port-forward pod/hkiamol 8080:80
      uruchom stronę: localhost:8080

Komenda 34 -> utowrzenie nowego wdrożenia: kubectl create deployment hello-kiamol-2 --image=kiamol/ch02-hello-kiamol
Konenda 35 -> wypisanie etykiet (json):  kubectl get deploy hello-kiamol-2 -o jsonpath='{.spec.template.metadata.labels}'
Komenda 36 -> wyświetlenie listy kapsuł, które mają pasującą etykietę:  kubectl get pods -l app=hello-kiamol-2
